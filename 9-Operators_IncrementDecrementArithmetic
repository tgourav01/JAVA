package JAVA;

public class Operators_IncrementDecrementArithmetic_9 {

	
	
	public static void main(String[] args) {
		//INCREMENT AND DECREMENT OPERATORS ARE OF TWO TYPES POSTFIX AND PREFIX
		
		int x=10;
		 int y=x++;
		 System.out.println(y +"postfix increment");
		  y=++x;
		 System.out.println(y+"prefix increment");
		 int a=20;
		 int b=a--;
		 System.out.println(b+"postfix decrement");
		  b=--a;
		 System.out.println(b+"prefix decrement");
		  
		 //•CASE 1:
		/*Increment/decrement  operators are applied only on variables not on constants
		 *  b=10++; b=++10; this is invalid we will get CE:
		 */ 
		 
		 //•CASE 2:
		 /* Nesting of increment /decrement operators is not allowed 
		  * int x=10;
		  * int y=++(x++);
		    */
		 
		 //CASE 3:
		   /* final  int x=10;
		    * x++; which is equal to x=x+1;CE :cannot assign a value to final variable
		    * for final variables we can't apply increment /decrement operators.
		    * */ 
		//CASE 4:
		 /* boolean b=true;
		  * b++;
		  * CE:operator ++ cannot applied to boolean
		  * */
		 
		 //CASE 5:Increment and Decrement is valid for all primitive data types except boolean
		 
		 char ch='a';
		 ch++;
		 System.out.println(ch);
		 double d=10.5;
		 d++;
		 System.out.println(d);
		 
		 //CASE 6:Difference between b++ and b=b+1
		 /* •if we apply  arithmetic operator b/w two variables a and b its result type is always
		  * MAX(int,type of a,type of b)*/
		 
		  byte m=10;
		  byte n=20;
		  byte o=(byte)(m+n); //without type  casting it will give CE: found int required byte
		  System.out.println(o);
		  m++;//internal type casting happened automatically
		  System.out.println(m);
		  	
		  /////////////-----ARITHMETIC OPERATORS--------///////////////
		  /* •if we apply  arithmetic operator b/w two variables a and b its result type is always
			  * MAX(int,type of a,type of b)
			  * therefore :
			  * byte +byte=int
			  * byte+short=int ;
			  * byte +long=long;
			  * long+double=double;
			  * float+long=float;
			  * char+char=int;
			  * char+double=double;
			  * */
		       byte xx=10;
		       long yy=20;
		       long zz=xx+yy;
		       System.out.println(zz + "  byte +long =long");
		       char q='a';
		       char r='b';
		       int s=q+r;
		       System.out.println(s + "  char+char =int ");
		       System.out.println(q+1.55f +"char +float=float");
		  
		     //CASE 1:INFINITY
		       /* 
		        * •In integral arithmetic (byte ,int ,short,long ) there is no way to represent 
		        * infinity hence infinity result will get  runtime arithmetic exception 
		        * */
		      // System.out.println(10/0); RE:AE:/by zero (infinity)
		       
		       //•Float and Double class contains two  CONSTANTS which is way to represent infinity:
		       //POSITIVE_INFINITY;
		       //NEGATIVE_INFINTY;
		       
		       System.out.println(10/0.0 +" floting arithmetic infinity");//No EXCEPTION because of floating point arithmetic
		    //CASE 2:Nan(Not a Number)   
		  /*
		   * In integral arithmetic (byte ,int ,short,long ) there is no way to represent 
		   * undefined result  hence infinity result will get  runtime arithmetic exception 
		   * 
		   * System.out.print(0/0);RE:AE:/by zero
		   * 
		   *•Float and Double class contains  CONSTANT  NaN which is way to represent undefined result:
		  */ 
		       System.out.println(0.0/0+ "  floating arithmetic undefined result");
		     
		       //  •Nan LOOPHOLES://
		       
		       System.out.println(10<Float.NaN);
		       System.out.println(10<=Float.NaN);
		       System.out.println(10>Float.NaN);
		       System.out.println(10>=Float.NaN);
		       System.out.println(10==Float.NaN);
		       System.out.println(Float.NaN==Float.NaN);
		       System.out.println(10!=Float.NaN);
		       System.out.println(Float.NaN!=Float.NaN);
		       
		      //CONCLUSION ON ARITHMETIC EXCEPTION
		     // •It is runtime exception not compile time error.
		       
		     // •It is possible only in integral arithmetic but not in floating point arithmetic
	
		     // • The only operator cause arithmetic exception are / and %.
	} 

}
